import AsyncStorage from "@react-native-async-storage/async-storage";
import { store } from "../store";
import { weatherApi } from "../services/api/weatherApi";
import {
  checkLastFetchTime,
  saveWeatherData,
  loadWeatherData,
  updateLastFetchTime,
  createTables
} from "../database/db";

const TWELVE_HOURS = 12 * 60 * 60 * 1000;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∫—ç—à
export const getCachedWeather = async () => {
  const locationId = await AsyncStorage.getItem("locationId");

  if (!locationId) {
    console.error("–û—à–∏–±–∫–∞: locationId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AsyncStorage.");
    return null;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ locationId –Ω–µ –Ω–∞–π–¥–µ–Ω
  }

  console.log("üöÄ locationId:", locationId);

  await createTables(); // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã

  const lastFetch = await checkLastFetchTime(locationId);
  const now = Date.now();

  console.log("lastFetch:", lastFetch, "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:", now, "–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:", now - lastFetch);

  // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  if (!lastFetch || now - lastFetch >= TWELVE_HOURS) {
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:", locationId);

    try {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const result = await store.dispatch(weatherApi.endpoints.getDailyForecast.initiate(locationId));

      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API:", result);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (result && "data" in result && result.data) {
        const dailyForecasts = result.data.DailyForecasts;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await saveWeatherData(locationId, dailyForecasts);
        await updateLastFetchTime(locationId);

        console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
        return dailyForecasts;
      } else {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API:", result?.error ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        return null;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", error);
      return null;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞
    }
  } else {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—ã–µ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞...");
    const localData = await loadWeatherData(locationId);

    if (localData && localData.length > 0) {
      console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:", localData);
      return localData;
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–æ—Å–∏–º –∏—Ö –∏–∑ API
      console.log("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å...");
      const result = await store.dispatch(weatherApi.endpoints.getDailyForecast.initiate(locationId));

      if (result && "data" in result && result.data) {
        const dailyForecasts = result.data.DailyForecasts;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await saveWeatherData(locationId, dailyForecasts);
        await updateLastFetchTime(locationId);

        console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
        return dailyForecasts;
      } else {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API:", result?.error ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        return null;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
  }
};
