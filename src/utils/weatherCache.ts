import AsyncStorage from "@react-native-async-storage/async-storage";
import { store } from "../store";
import { weatherApi } from "../services/api/weatherApi";
import {
  checkLastFetchTime,
  saveWeatherData,
  loadWeatherData,
  updateLastFetchTime,
  createTables
} from "../database/db";

const TWELVE_HOURS = 12 * 60 * 60 * 1000;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∫—ç—à
export const getCachedWeather = async () => {
  const locationId = await AsyncStorage.getItem("locationId");

  if (!locationId) {
    console.error("‚ùå –û—à–∏–±–∫–∞: locationId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AsyncStorage.");
    return null;
  }

  console.log("üìç locationId:", locationId);

  await createTables();

  const lastFetch = await checkLastFetchTime(locationId);
  const now = Date.now();

  console.log("üïí lastFetch:", lastFetch, "| –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:", now, "| –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:", now - lastFetch);

  const fetchAndFormat = async () => {
    const result = await store.dispatch(
      weatherApi.endpoints.getFiveDayForecast.initiate(locationId)
    );

    console.log("üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API:", result);

    if (result && "data" in result && result.data) {
      const dailyForecasts = result.data.DailyForecasts;

      const formatted = dailyForecasts.map((day: any) => ({
        epochDate: Math.floor(new Date(day.Date).getTime() / 1000),
        dayTemperature: day.Temperature.Maximum.Value,
        nightTemperature: day.Temperature.Minimum.Value,
        dayPhrase: day.Day.IconPhrase,
        nightPhrase: day.Night.IconPhrase,
      }));

      await saveWeatherData(locationId, formatted);
      await updateLastFetchTime(locationId);

      console.log("üì¶ –°—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:", formatted);
      console.log("üì§ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: API ‚Üí SQLite");

      return formatted;
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API:", result?.error ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
      return null;
    }
  };

  if (!lastFetch || now - lastFetch >= TWELVE_HOURS) {
    console.log("üåê –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...");
    return await fetchAndFormat();
  } else {
    console.log("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite (–∫—ç—à)...");

    const localData = await loadWeatherData(locationId);

    if (localData && localData.length > 0) {
      console.log("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite:", localData);
      console.log("üì§ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: SQLite (–∏–∑ –∫—ç—à–∞)");
      return localData;
    } else {
      console.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î ‚Äî –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...");
      return await fetchAndFormat();
    }
  }
};
