import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  ActivityIndicator,
  FlatList,
  Dimensions,
  Image,
} from "react-native";
import { getCachedWeather } from "../utils/weatherCache";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { LineChart } from "react-native-chart-kit";
import weatherIcons from "../assets/weatherIcons"; // üëà –∏–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
import styles from "../styles/WeatherStyles";
import { Animated } from 'react-native';

type WeatherItem = {
  dateTime: string;
  dayTemperature: string;
  dayPhase: string;
  nightTemperature: string;
  nightPhase: string;
  weatherIconDay: number;
  weatherIconNight: number;
};

type HourlyItem = {
  dateTime: string;
  temperature: string;
  phrase: string;
  weatherIcon: number;
};

const Weather = () => {
  const [weather, setWeather] = useState<WeatherItem[]>([]);
  const [hourlyWeather, setHourlyWeather] = useState<HourlyItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [locationId, setLocationId] = useState<string | null>(null);
  const fadeAnim = useState(new Animated.Value(0))[0]; // üëà –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏

  useEffect(() => {
    const loadWeather = async () => {
      setLoading(true);
      console.log("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –Ω–∞—á–∞—Ç–∞");

      try {
        const savedId = await AsyncStorage.getItem("locationId");
        console.log("üìç –ó–∞–≥—Ä—É–∂–µ–Ω locationId –∏–∑ –ø–∞–º—è—Ç–∏:", savedId);
        setLocationId(savedId);

        if (!savedId) {
          console.warn("‚ö†Ô∏è Location ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–≥–æ–¥–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
          return;
        }

        const result = await getCachedWeather();
        console.log("üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –ë–î:", result);

        if (result?.daily && Array.isArray(result.daily)) {
          const formatted = result.daily.map((item) => {
            const date = new Date(item.epochDate * 1000).toLocaleDateString();
            const dayC = `${Math.round((item.dayTemperature - 32) * 5 / 9)}¬∞C`;
            const nightC = `${Math.round((item.nightTemperature - 32) * 5 / 9)}¬∞C`;

            return {
              dateTime: date,
              dayTemperature: dayC,
              dayPhase: item.dayPhrase ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
              nightTemperature: nightC,
              nightPhase: item.nightPhrase ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
              weatherIconDay: item.weatherIdDay,
              weatherIconNight: item.weatherIdNight,
            };
          });

          console.log("‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ daily –¥–∞–Ω–Ω—ã–µ:", formatted);
          setWeather(formatted);
        } else {
          console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π daily –ø—Ä–æ–≥–Ω–æ–∑");
        }

        if (result?.hourly && Array.isArray(result.hourly)) {
          const offsetMinutes = new Date().getTimezoneOffset();
          const offsetHours = -offsetMinutes / 60;
          
          const hourlyFormatted = result.hourly.map((item) => {
            const date = new Date(item.epochDateTime * 1000);
            date.setHours(date.getHours() + offsetHours);
          
            const hour = date.getHours().toString().padStart(2, "0");
            const hourStr = `${hour}:00`;
            const tempF = item.temperatureValue;
            const tempC = `${Math.round((tempF - 32) * 5 / 9)}¬∞C`;
            return {
              dateTime: hourStr,
              temperature: tempC,
              phrase: item.iconPhrase,
              weatherIcon: item.weatherIcon,
            };
          });
        
          console.log("‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ hourly –¥–∞–Ω–Ω—ã–µ:", hourlyFormatted);
          setHourlyWeather(hourlyFormatted);
        } else {
          console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π hourly –ø—Ä–æ–≥–Ω–æ–∑");
        }

      } catch (error: unknown) {
        if (error instanceof Error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã:", error.stack);
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã:", error);
        }
      } finally {
        setLoading(false);
        console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 1000,
          useNativeDriver: true,
        }).start();
      }
    };

    loadWeather();
  }, []);

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" />
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </View>
    );
  }

  if (!locationId) {
    return (
      <View style={styles.container}>
        <Text>‚ùå Location ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.</Text>
      </View>
    );
  }

  const getIconSource = (iconNumber: number) => {
    const formattedNumber = iconNumber < 10 ? `0${iconNumber}` : `${iconNumber}`;
    return weatherIcons[formattedNumber] || weatherIcons["01"]; // –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "01"
  };

  return (
    <Animated.ScrollView
      contentContainerStyle={styles.container}
      style={{ opacity: fadeAnim }} // üëà –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    >
      <View style={styles.currentWeatherContainer}>
        <Image
          source={getIconSource(hourlyWeather[0]?.weatherIcon ?? 1)}
          style={styles.currentWeatherIcon}
        />
        <Text style={styles.currentTemp}>
          {hourlyWeather[0]?.temperature ?? "‚Äî"}
        </Text>
        <Text style={styles.currentPhrase}>
          {hourlyWeather[0]?.phrase ?? "‚Äî"}
        </Text>
      </View>

      <Text style={styles.sectionTitle}>‚è∞ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12 —á–∞—Å–æ–≤</Text>
      <FlatList
        data={hourlyWeather}
        horizontal
        keyExtractor={(_, i) => i.toString()}
        contentContainerStyle={styles.hourlyScroll}
        renderItem={({ item }) => (
          <Animated.View
            style={[styles.hourCard, { opacity: fadeAnim }]} // üëà –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
          >
            <Text style={styles.hourText}>{item.dateTime}</Text>
            <Image
              source={getIconSource(item.weatherIcon)}
              style={styles.weatherIconSmall}
            />
            <Text style={styles.hourTemp}>{item.temperature}</Text>
            <Text style={styles.hourPhrase}>{item.phrase}</Text>
          </Animated.View>
        )}
      />

      {hourlyWeather.length > 0 && (
        <>
          <Text style={styles.sectionTitle}>üìà –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —á–∞—Å–∞–º</Text>
          <LineChart
            data={{
              labels: hourlyWeather.map((item) => item.dateTime),
              datasets: [
                {
                  data: hourlyWeather.map((item) =>
                    parseInt(item.temperature.replace("¬∞C", "")) || 0
                  ),
                },
              ],
            }}
            width={Dimensions.get("window").width - 40}
            height={290}
            yAxisSuffix="¬∞C"
            verticalLabelRotation={60}
            chartConfig={{
              backgroundColor: "#e3f2fd",
              backgroundGradientFrom: "#e3f2fd",
              backgroundGradientTo: "#bbdefb",
              decimalPlaces: 0,
              color: (opacity = 1) => `rgba(0, 123, 255, ${opacity})`,
              labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
              style: {
                borderRadius: 16,
              },
              propsForDots: {
                r: "4",
                strokeWidth: "2",
                stroke: "#1976d2",
              },
            }}
            bezier
            style={{
              marginVertical: 16,
              borderRadius: 16,
            }}
          />
        </>
      )}

      <Text style={styles.sectionTitle}>üå§ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</Text>
      {weather.map((item, index) => (
        <Animated.View
          key={index}
          style={[styles.card, { opacity: fadeAnim }]} // üëà –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
        >
          <Text style={styles.date}>{item.dateTime}</Text>
          <View style={styles.dayNightRow}>
            <View style={styles.dayNightBlock}>
              <Image
                source={getIconSource(item.weatherIconDay)}
                style={styles.weatherIconSmall}
              />
              <Text style={styles.temp}>–î–µ–Ω—å: {item.dayTemperature}</Text>
              <Text style={styles.phrase}>{item.dayPhase}</Text>
            </View>
            <View style={styles.dayNightBlock}>
              <Image
                source={getIconSource(item.weatherIconNight)}
                style={styles.weatherIconSmall}
              />
              <Text style={styles.temp}>–ù–æ—á—å: {item.nightTemperature}</Text>
              <Text style={styles.phrase}>{item.nightPhase}</Text>
            </View>
          </View>
        </Animated.View>
      ))}
    </Animated.ScrollView>
  );
};

export default Weather;