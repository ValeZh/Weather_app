import SQLite from "react-native-sqlite-storage";

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const db = SQLite.openDatabase(
  { name: "weather.db", location: "default" },
  () => console.log("üì¶ Database opened"),
  (error) => console.error("‚ùå Database error: ", error)
);

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
export const createTables = () => {
  db.transaction((tx) => {
    tx.executeSql(
      `CREATE TABLE IF NOT EXISTS weather (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        location_id TEXT,
        fetchTime INTEGER,
        epochDate INTEGER,
        dayTemperature REAL,
        nightTemperature REAL,
        dayPhrase TEXT,
        nightPhrase TEXT
      )`,
      [],
      () => console.log("‚úÖ Weather table created!"),
      (error) => console.error("‚ùå Error creating weather table:", error)
    );

    tx.executeSql(
      `CREATE TABLE IF NOT EXISTS last_fetch_time (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        locationId TEXT UNIQUE,
        lastFetchTime INTEGER
      )`,
      [],
      () => console.log("‚úÖ Last fetch time table created!"),
      (error) => console.error("‚ùå Error creating last fetch time table:", error)
    );
  });
};

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É
export const saveWeatherData = async (locationId: string, weatherItems: any[]) => {
  return new Promise<void>((resolve, reject) => {
    const fetchTime = Date.now();

    db.transaction(
      (tx) => {
        // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        tx.executeSql(
          `DELETE FROM weather WHERE location_id = ?`,
          [locationId],
          () => console.log(`üóë –°—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è location_id = ${locationId}`),
          (_, error) => {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤:", error);
            return false;
          }
        );

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö
        for (const item of weatherItems) {
          tx.executeSql(
            `INSERT INTO weather (location_id, fetchTime, epochDate, dayTemperature, nightTemperature, dayPhrase, nightPhrase)
             VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              locationId,
              fetchTime,
              item.epochDate,
              item.dayTemperature,
              item.nightTemperature,
              item.dayPhrase,
              item.nightPhrase,
            ],
            () => console.log("‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑:", item),
            (_, error) => {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É:", error);
              return false;
            }
          );
        }
      },
      (error) => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);
        reject(error);
      },
      () => {
        console.log("‚úÖ –£—Å—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.");
        logWeatherTable(); // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–º—ñ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        resolve();
      }
    );
  });
};

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –∑ –ë–î
export const loadWeatherData = (locationId: string) => {
  return new Promise<any[]>((resolve, reject) => {
    db.transaction((tx) => {
      tx.executeSql(
        `SELECT * FROM weather WHERE location_id = ?`,
        [locationId],
        (_, results) => {
          const rows = results.rows.raw();
          console.log("üì§ –î–∞–Ω—ñ –∑ SQLite:", rows);
          resolve(rows);
        },
        (error) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏:", error);
          reject(error);
        }
      );
    });
  });
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —á–∞—Å—É –∑–∞–ø–∏—Ç—É
export const checkLastFetchTime = (locationId: string) => {
  return new Promise<number>((resolve, reject) => {
    db.transaction((tx) => {
      tx.executeSql(
        `SELECT lastFetchTime FROM last_fetch_time WHERE locationId = ?`,
        [locationId],
        (_, results) => {
          const rows = results.rows.raw();
          resolve(rows.length > 0 ? rows[0].lastFetchTime : 0);
        },
        (error) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É:", error);
          reject(error);
        }
      );
    });
  });
};

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
export const updateLastFetchTime = (locationId: string) => {
  const time = Date.now();
  db.transaction((tx) => {
    tx.executeSql(
      `INSERT OR REPLACE INTO last_fetch_time (id, locationId, lastFetchTime)
       VALUES (
         (SELECT id FROM last_fetch_time WHERE locationId = ?),
         ?, ?
       )`,
      [locationId, locationId, time],
      () => {
        console.log("üîÑ Last fetch time updated!");
        logLastFetchTable(); // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–º—ñ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ
      },
      (error) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É:", error)
    );
  });
};

// üìã –í–∏–≤—ñ–¥ –≤–º—ñ—Å—Ç—É —Ç–∞–±–ª–∏—Ü—ñ weather
const logWeatherTable = () => {
  db.transaction((tx) => {
    tx.executeSql(
      `SELECT * FROM weather`,
      [],
      (_, results) => {
        const rows = results.rows.raw();
        console.log("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã weather:", rows);
      },
      (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã weather:", error);
      }
    );
  });
};

// üìã –í–∏–≤—ñ–¥ –≤–º—ñ—Å—Ç—É —Ç–∞–±–ª–∏—Ü—ñ last_fetch_time
const logLastFetchTable = () => {
  db.transaction((tx) => {
    tx.executeSql(
      `SELECT * FROM last_fetch_time`,
      [],
      (_, results) => {
        const rows = results.rows.raw();
        console.log("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã last_fetch_time:", rows);
      },
      (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã last_fetch_time:", error);
      }
    );
  });
};
