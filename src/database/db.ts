import SQLite from "react-native-sqlite-storage";
import type { HourlyForecast } from "../services/api/types";

const db = SQLite.openDatabase(
  { name: "weather.db", location: "default" },
  () => console.log("üì¶ Database opened"),
  (error) => console.error("‚ùå Database error: ", error)
);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
export const createTables = () => {
  db.transaction((tx) => {
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    tx.executeSql(
      `CREATE TABLE IF NOT EXISTS weather (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        location_id TEXT,
        fetchTime INTEGER,
        epochDate INTEGER,
        dayTemperature REAL,
        nightTemperature REAL,
        dayPhrase TEXT,
        nightPhrase TEXT,
        weatherIdDay INTEGER,
        weatherIdNight INTEGER,
        HasPrecipitationDay BOOLEAN,
        HasPrecipitationNight BOOLEAN
      )`,
      [],
      () => console.log("‚úÖ Weather table created!"),
      (error) => console.error("‚ùå Error creating weather table:", error)
    );

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    tx.executeSql(
      `CREATE TABLE IF NOT EXISTS last_fetch_time (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        locationId TEXT UNIQUE,
        lastFetchTime INTEGER
      )`,
      [],
      () => console.log("‚úÖ Last fetch time table created!"),
      (error) => console.error("‚ùå Error creating last fetch time table:", error)
    );

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è 12-—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    tx.executeSql(
      `CREATE TABLE IF NOT EXISTS weather_12_hours (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        location_id TEXT NOT NULL,
        fetchTime INTEGER NOT NULL,
        dateTime TEXT NOT NULL,
        epochDateTime INTEGER NOT NULL,
        weatherIcon INTEGER NOT NULL,
        iconPhrase TEXT NOT NULL,
        hasPrecipitation INTEGER NOT NULL,
        isDaylight INTEGER NOT NULL,
        temperatureValue REAL NOT NULL,
        precipitationProbability INTEGER NOT NULL
      )`,
      [],
      () => console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ weather_12_hours —Å–æ–∑–¥–∞–Ω–∞!"),
      (error) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ weather_12_hours:", error)
    );
  });
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
export const saveWeatherData = async (locationId: string, weatherItems: any[]) => {
  return new Promise<void>((resolve, reject) => {
    const fetchTime = Date.now();

    db.transaction(
      (tx) => {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        tx.executeSql(
          `DELETE FROM weather WHERE location_id = ?`,
          [locationId],
          () => console.log(`üóë –°—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è location_id = ${locationId}`),
          (_, error) => {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤:", error);
            return false;
          }
        );

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for (const item of weatherItems) {
          tx.executeSql(
            `INSERT INTO weather (
              location_id, fetchTime, epochDate,
              dayTemperature, nightTemperature,
              dayPhrase, nightPhrase,
              weatherIdDay, weatherIdNight,
              HasPrecipitationDay, HasPrecipitationNight
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              locationId,
              fetchTime,
              item.epochDate,
              item.dayTemperature,
              item.nightTemperature,
              item.dayPhrase,
              item.nightPhrase,
              item.weatherIdDay,
              item.weatherIdNight,
              item.HasPrecipitationDay,
              item.HasPrecipitationNight
            ],
            () => console.log("‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑:", item),
            (_, error) => {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É:", error);
              return false;
            }
          );
        }
      },
      (error) => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);
        reject(error);
      },
      () => {
        console.log("‚úÖ –£—Å—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.");
        logWeatherTable();
        resolve();
      }
    );
  });
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ 12-—á–∞—Å–æ–≤–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ
export const saveHourlyWeatherData = async (locationId: string, hourlyData: HourlyForecast[]) => {
  return new Promise<void>((resolve, reject) => {
    const fetchTime = Date.now();

    db.transaction(
      (tx) => {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        tx.executeSql(
          `DELETE FROM weather_12_hours WHERE location_id = ?`,
          [locationId],
          () => console.log(`üóë –°—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ (12 –≥–æ–¥) –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è location_id = ${locationId}`),
          (_, error) => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö 12-—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:", error);
            return false;
          }
        );

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for (const item of hourlyData) {
          tx.executeSql(
            `INSERT INTO weather_12_hours (
              location_id, fetchTime, dateTime, epochDateTime, weatherIcon, iconPhrase,
              hasPrecipitation, isDaylight, temperatureValue, precipitationProbability
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              locationId,
              fetchTime,
              item.DateTime,
              item.EpochDateTime,
              item.WeatherIcon,
              item.IconPhrase,
              item.HasPrecipitation ? 1 : 0, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º boolean –≤ 1 –∏–ª–∏ 0
              item.IsDaylight ? 1 : 0, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º boolean –≤ 1 –∏–ª–∏ 0
              item.Temperature.Value,
              item.PrecipitationProbability
            ],
            () => console.log("‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:", item.DateTime),
            (_, error) => {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:", error);
              return false;
            }
          );
        }
      },
      (error) => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", error);
        reject(error);
      },
      () => {
        console.log("‚úÖ –£—Å—ñ 12-–≥–æ–¥–∏–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.");
        logWeather12HoursTable();
        resolve();
      }
    );
  });
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
export const loadWeatherData = (locationId: string) => {
  return new Promise<any[]>((resolve, reject) => {
    db.transaction((tx) => {
      tx.executeSql(
        `SELECT * FROM weather WHERE location_id = ?`,
        [locationId],
        (_, results) => {
          const rows = results.rows.raw();
          console.log("üì§ –î–∞–Ω—ñ –∑ SQLite:", rows);
          resolve(rows);
        },
        (error) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏:", error);
          reject(error);
        }
      );
    });
  });
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ 12-—á–∞—Å–æ–≤–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ
export const loadHourlyWeatherData = (locationId: string) => {
  return new Promise<any[]>((resolve, reject) => {
    db.transaction((tx) => {
      tx.executeSql(
        `SELECT * FROM weather_12_hours WHERE location_id = ?`,
        [locationId],
        (_, results) => {
          const rows = results.rows.raw();
          console.log("üì§ –î–∞–Ω—ñ –∑ weather_12_hours:", rows);
          resolve(rows);
        },
        (error) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ 12-–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:", error);
          reject(error);
        }
      );
    });
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
export const checkLastFetchTime = (locationId: string) => {
  return new Promise<number>((resolve, reject) => {
    db.transaction((tx) => {
      tx.executeSql(
        `SELECT lastFetchTime FROM last_fetch_time WHERE locationId = ?`,
        [locationId],
        (_, results) => {
          const rows = results.rows.raw();
          resolve(rows.length > 0 ? rows[0].lastFetchTime : 0);
        },
        (error) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É:", error);
          reject(error);
        }
      );
    });
  });
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
export const updateLastFetchTime = (locationId: string) => {
  const time = Date.now();
  db.transaction((tx) => {
    tx.executeSql(
      `INSERT OR REPLACE INTO last_fetch_time (id, locationId, lastFetchTime)
       VALUES (
         (SELECT id FROM last_fetch_time WHERE locationId = ?),
         ?, ? 
       )`,
      [locationId, locationId, time],
      () => {
        console.log("üîÑ Last fetch time updated!");
        logLastFetchTable();
      },
      (error) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É:", error)
    );
  });
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã weather
const logWeatherTable = () => {
  db.transaction((tx) => {
    tx.executeSql(
      `SELECT * FROM weather`,
      [],
      (_, results) => {
        const rows = results.rows.raw();
        console.log("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã weather:", rows);
      },
      (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã weather:", error);
      }
    );
  });
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã weather_12_hours
const logWeather12HoursTable = () => {
  db.transaction((tx) => {
    tx.executeSql(
      `SELECT * FROM weather_12_hours`,
      [],
      (_, results) => {
        const rows = results.rows.raw();
        console.log("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã weather_12_hours:", rows);
      },
      (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã weather_12_hours:", error);
      }
    );
  });
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã last_fetch_time
const logLastFetchTable = () => {
  db.transaction((tx) => {
    tx.executeSql(
      `SELECT * FROM last_fetch_time`,
      [],
      (_, results) => {
        const rows = results.rows.raw();
        console.log("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã last_fetch_time:", rows);
      },
      (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã last_fetch_time:", error);
      }
    );
  });
};
